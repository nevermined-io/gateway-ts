{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "InfoController_getInfo",
        "summary": "Public",
        "description": "Get API info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Return API Info",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/GetInfoDto" } }
            }
          }
        },
        "tags": ["Info"]
      }
    },
    "/api/v1/node/services/encrypt": {
      "post": {
        "operationId": "EncryptController_doEncrypt",
        "summary": "Public",
        "description": "Encrypt",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/EncryptDto" } }
          }
        },
        "responses": {
          "200": {
            "description": "Return encrypted stuff",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/EncryptResult" } }
            }
          },
          "400": {
            "description": "Bad Request. Incorrect encryption method",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestException" }
              }
            }
          }
        },
        "tags": ["Encrypt"]
      }
    },
    "/api/v1/node/services/access/{agreement_id}/{index}": {
      "get": {
        "operationId": "AccessController_doAccess",
        "summary": "Public",
        "description": "Access asset",
        "parameters": [
          { "name": "index", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "result", "required": true, "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Return the url of asset",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StreamableFile" } }
            }
          },
          "400": {
            "description": "Bad Request. DID missing",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestException" }
              }
            }
          }
        },
        "tags": ["Access"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/nft-access/{agreement_id}/{index}": {
      "get": {
        "operationId": "AccessController_doNftAccess",
        "summary": "Public",
        "description": "Access asset",
        "parameters": [
          { "name": "index", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "result", "required": true, "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Return the url of asset",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StreamableFile" } }
            }
          }
        },
        "tags": ["Access"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/nft-transfer": {
      "post": {
        "operationId": "AccessController_doNftTransfer",
        "summary": "Public",
        "description": "Transfer an NFT",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TransferDto" } }
          }
        },
        "responses": {
          "200": { "description": "Return \"success\" if transfer worked" },
          "404": {
            "description": "Agreeement not found",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } }
            }
          }
        },
        "tags": ["Access"]
      }
    },
    "/api/v1/node/services/nft-sales-proof": {
      "post": {
        "operationId": "AccessController_doNftSales",
        "summary": "Public",
        "description": "Transfer an NFT",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/TransferDto" } }
          }
        },
        "responses": { "200": { "description": "Return \"success\" if transfer worked" } },
        "tags": ["Access"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/download/{index}": {
      "get": {
        "operationId": "AccessController_doDownload",
        "summary": "Public",
        "description": "Download asset",
        "parameters": [
          { "name": "index", "required": true, "in": "path", "schema": { "type": "number" } },
          { "name": "result", "required": true, "in": "query", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Return the asset",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/StreamableFile" } }
            }
          },
          "400": {
            "description": "Bad Request. DID missing",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestException" }
              }
            }
          }
        },
        "tags": ["Access"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/upload/{backend}": {
      "post": {
        "operationId": "AccessController_doUpload",
        "summary": "Public",
        "description": "Uploads a file or some content to a remote storage",
        "parameters": [
          { "name": "backend", "required": true, "in": "path", "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UploadDto" } }
          }
        },
        "responses": {
          "200": { "description": "Return the url of the file uploaded" },
          "400": {
            "description": "Bad Request. File missing or  Backend not supported",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BadRequestException" }
              }
            }
          },
          "500": {
            "description": "Error uploading file to backend",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorException" }
              }
            }
          }
        },
        "tags": ["Access"]
      }
    },
    "/api/v1/node/services/oauth/token": {
      "post": {
        "operationId": "AuthController_token",
        "summary": "Public",
        "description": "Login using a JWT claim for client authentication",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ClientAssertionDto" } }
          }
        },
        "responses": {
          "201": {
            "description": "The access_token",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/LoginDto" } }
            }
          },
          "401": { "description": "Unauthorized access" }
        },
        "tags": ["Auth"]
      }
    },
    "/api/v1/node/services/compute/list": {
      "get": {
        "operationId": "ComputeController_getWorkflowsList",
        "summary": "Returns a list of all executed workflows",
        "description": "List of workflows",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Returns an object that contains the list of workflows IDs",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkflowListResultDto" }
              }
            }
          },
          "500": {
            "description": "Error getting list of workflows from Argo Workflow",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorException" }
              }
            }
          }
        },
        "tags": ["Compute"]
      }
    },
    "/api/v1/node/services/compute/status/{workflowID}": {
      "get": {
        "operationId": "ComputeController_getWorkflowStatus",
        "summary": "Returns the complete status about a workflow",
        "description": "Status",
        "parameters": [
          { "name": "workflowID", "required": true, "in": "path", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Returns a status object",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StatusWorkflowResultDto" }
              }
            }
          },
          "404": {
            "description": "workflow not found in Argo Workflow",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/NotFoundException" } }
            }
          },
          "500": {
            "description": "Error processing status from Argo Workflows",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorException" }
              }
            }
          }
        },
        "tags": ["Compute"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/compute/execute/{agreement_id}": {
      "post": {
        "operationId": "ComputeController_initCompute",
        "summary": "Starts the execution of a compute workflow",
        "description": "Execute compute",
        "parameters": [
          { "name": "agreement_id", "required": true, "in": "path", "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ExecuteWorkflowDto" } }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Workflow ID",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ExecuteWorkflowResultDto" }
              }
            }
          },
          "500": {
            "description": "Error creating a new workflow in  Argo Workflows",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorException" }
              }
            }
          }
        },
        "tags": ["Compute"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/compute/stop/{workflowID}": {
      "delete": {
        "operationId": "ComputeController_stopWorkflowExecution",
        "summary": "Stop the execution of a workflow",
        "description": "Stop",
        "parameters": [
          { "name": "workflowID", "required": true, "in": "path", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Returns a success message",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/StopWorkflowResultDto" }
              }
            }
          },
          "500": {
            "description": "Error stopping a workflow in Argo Workflows",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/InternalServerErrorException" }
              }
            }
          }
        },
        "tags": ["Compute"],
        "security": [{ "Authorization": [] }]
      }
    },
    "/api/v1/node/services/compute/logs/{workflowID}": {
      "get": {
        "operationId": "ComputeController_getWorkflowExecutionLogs",
        "summary": "Returns the logs of the execution of a workflow",
        "description": "Logs",
        "parameters": [
          { "name": "workflowID", "required": true, "in": "path", "schema": { "type": "string" } }
        ],
        "responses": {
          "200": {
            "description": "Returns an object that contains the execution logs",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogsWorkflowResultDto" }
              }
            }
          }
        },
        "tags": ["Compute"],
        "security": [{ "Authorization": [] }]
      }
    }
  },
  "info": { "title": "Nevermined Node", "description": "", "version": "1.0.0-rc6", "contact": {} },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "Authorization": { "scheme": "bearer", "bearerFormat": "JWT", "type": "http" }
    },
    "schemas": {
      "GetInfoDto": {
        "type": "object",
        "properties": {
          "APIversion": {
            "type": "string",
            "example": "1.0.4",
            "description": "Marketplace API Version"
          },
          "docs": {
            "type": "string",
            "example": "http://localhost:3100/api/v1/docs",
            "description": "API docs url"
          }
        },
        "required": ["APIversion", "docs"]
      },
      "EncryptDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "example": "PSK-ECDSA",
            "description": "Encryption method"
          },
          "message": { "type": "string", "example": "Hello!", "description": "Encrypted message" }
        },
        "required": ["method", "message"]
      },
      "EncryptResult": {
        "type": "object",
        "properties": {
          "public-key": { "type": "string", "description": "Public key used by the node" },
          "hash": { "type": "string", "description": "Encrypted data" },
          "method": {
            "type": "string",
            "description": "Encryption method (PSK-ECDSA or PSK-RSA)",
            "example": "PSK-ECDSA"
          }
        },
        "required": ["public-key", "hash", "method"]
      },
      "BadRequestException": { "type": "object", "properties": {} },
      "StreamableFile": { "type": "object", "properties": {} },
      "TransferDto": {
        "type": "object",
        "properties": {
          "agreementId": {
            "type": "string",
            "description": "The agreement for NFT transfer",
            "example": "0x..."
          },
          "nftHolder": {
            "type": "string",
            "description": "NFT holder address",
            "example": "0x..."
          },
          "nftReceiver": {
            "type": "string",
            "description": "NFT receiver address",
            "example": "0x..."
          },
          "nftAmount": {
            "type": "string",
            "description": "Number of NFTs to transfer",
            "example": "1"
          },
          "nftType": { "type": "number", "description": "Type of NFT", "example": "721" }
        },
        "required": ["agreementId", "nftHolder", "nftReceiver", "nftAmount", "nftType"]
      },
      "NotFoundException": { "type": "object", "properties": {} },
      "": { "type": "object", "properties": {} },
      "UploadDto": {
        "type": "object",
        "properties": {
          "encrypt": {
            "type": "string",
            "description": "Encrypt uploaded data",
            "example": "false"
          },
          "message": {
            "example": "Hello!",
            "description": "Message to upload",
            "allOf": [{ "$ref": "#/components/schemas/" }]
          }
        }
      },
      "InternalServerErrorException": { "type": "object", "properties": {} },
      "ClientAssertionDto": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "Type type of JWT client assertion. Must be urn:ietf:params:oauth:grant-type:jwt-bearer",
            "example": "urn:ietf:params:oauth:grant-type:jwt-bearer"
          },
          "assertion": {
            "type": "string",
            "description": "A single JWT",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"
          }
        },
        "required": ["grant_type", "assertion"]
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The Authorization Bearer token",
            "example": "eyJhbGciOiJSUzI1NiIsImtpZCI6IjIyIn0.eyJpc3Mi[...omitted for brevity...]"
          }
        },
        "required": ["access_token"]
      },
      "WorkflowListResultDto": {
        "type": "object",
        "properties": {
          "workflows": {
            "description": "Array with workflowsId",
            "example": "[\"workflowId\": \"nevermined-compute-q9rld\", \"workflowId\": \"nevermined-compute-jf9gf\"]",
            "type": "array",
            "items": { "type": "string" }
          }
        },
        "required": ["workflows"]
      },
      "StatusWorkflowResultDto": {
        "type": "object",
        "properties": {
          "workflowStatus": {
            "type": "object",
            "description": "Status of the workflow",
            "example": "{\"status\":\"Succeeded\",\"startedAt\":\"2022-11-30T08:34:12Z\",\"finishedAt\":\"2022-11-30T08:34:38Z\",\"pods\":[]}"
          }
        },
        "required": ["workflowStatus"]
      },
      "ExecuteWorkflowDto": {
        "type": "object",
        "properties": {
          "workflowDid": {
            "type": "string",
            "description": "The Did for the Compute Workflow DDO",
            "example": "did:nv:e12092c13c408ade77f16bfbfb279c04fdcfb75eb5f9a4464a1d77db4c613652"
          },
          "consumer": {
            "type": "string",
            "description": "The address of the consumer of the compute result",
            "example": "0xe2DD09d719Da89e5a3D0F2549c7E24566e947260"
          }
        },
        "required": ["workflowDid", "consumer"]
      },
      "ExecuteWorkflowResultDto": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string",
            "description": "The workflowId executed",
            "example": "nevermined-compute-q9rld"
          }
        },
        "required": ["workflowId"]
      },
      "StopWorkflowResultDto": {
        "type": "object",
        "properties": {
          "status": { "type": "number", "description": "status of the request", "example": "200" },
          "text": {
            "type": "string",
            "description": "text explaining result",
            "example": "workflow nevermined-compute-9lw24 successfuly deleted`"
          }
        },
        "required": ["status", "text"]
      },
      "LogsWorkflowResultDto": {
        "type": "object",
        "properties": {
          "logs": { "type": "object", "description": "logs of the workflow", "example": "200" }
        },
        "required": ["logs"]
      }
    }
  }
}
